<?xml version="1.0" standalone="no"?>

<kickstart>

<description>

	A skeleton XML node file. This file is a template and is intended
	as an example of how to customize your Rocks cluster. Kickstart XML
	nodes such as this describe packages and "post installation" shell
	scripts for your cluster.

	XML files in the site-nodes/ directory should be named either
	"extend-[name].xml" or "replace-[name].xml", where [name] is
	the name of an existing xml node. 

	If your node is prefixed with replace, its instructions will be used
	instead of the official node's. If it is named extend, its directives
	will be concatenated to the end of the official node.

</description>


<changelog>
</changelog>

<main>
	<!-- kickstart 'main' commands go here -->
</main>

<pre>
	<!-- partitioning commands go here -->
</pre>


<!-- There may be as many packages as needed here. Just make sure you only
     uncomment as many package lines as you need. Any empty <package></package>
     tags are going to confuse rocks and kill the installation procedure
-->
<package>libicu</package>
<package>libxslt</package>
<package>gstreamer</package>
<package>gstreamer-plugins-base</package>
<package>xkeyboard-config</package>
<package>libxkbcommon</package>
<package>libxkbcommon-x11</package>
<package>mesa-dri-drivers</package>


<post>
	<!-- Insert your post installation script here. This
	code will be executed on the destination node after the
	packages have been installed. Typically configuration files
	are built and services setup in this section. -->

	<!-- WARNING: Watch out for special XML chars like ampersand,
	greater/less than and quotes. A stray ampersand will cause the
	kickstart file building process to fail, thus, you won't be able
	to reinstall any nodes. It is recommended that after you create an
	XML node file, that you run:

		xmllint -noout file.xml
	-->

	<eval shell="python">

		<!-- This is python code that will be executed on the
		frontend node during kickstart file generation. You may contact
		the database, make network queries, etc.  These sections are
		generally used to help build more complex configuration
		files.  The 'shell' attribute is optional and may point to any
		language interpreter such as "bash", "perl", "ruby", etc.
		By default shell="bash".  -->

	</eval>

<file name="/etc/sysctl.conf" mode="append">
vm.dirty_bytes = 4294967296
vm.dirty_background_bytes = 2147483648
</file>

<file name="/etc/security/limits.conf" mode="append">
* soft nofile 8192
* hard nofile 8192
</file>

<file name="/usr/share/Modules/init/.modulespath" mode="append">
/share/apps/modulefiles
</file>

<!-- This helper script exports environment variablies into interactive sessions
     that use SSH rather than QRSH. We switched to SSH in order to support X2Go. -->
<file name="/etc/profile.d/sge-interactive-env.sh" owner="root.root" perms="0644">
# https://arc.liv.ac.uk/pipermail/gridengine-users/2010-February/029106.html

# Find the job ID by looking at the sge_shepherd process
MYPARENT=`ps -p $$ -o ppid --no-header`
MYPARENT=`ps -p $MYPARENT -o ppid --no-header`
MYPARENT=`ps -p $MYPARENT -o ppid --no-header`
MYSTARTUP=`ps -p $MYPARENT -o command --no-header`
if [ "${MYSTARTUP:0:13}" = "sge_shepherd-" ]; then
    echo -n "Entering SGE interactive session: "
    MYJOBID=${MYSTARTUP:13}
    MYJOBID=${MYJOBID% -bg}
    echo "Job ${MYJOBID}"

    # Source parts of the sge_shepherd's environment file and export them in to our environment
    SGE_SPOOL=/opt/gridengine/default/spool
    ENVFILE=${SGE_SPOOL}/$(hostname -s)/active_jobs/${MYJOBID}.1/environment
    source &lt;(sed -n -e 's/^SGE_\|^TMPDIR/export &amp;/p' $ENVFILE)
fi
</file>

# scratch folder
mkdir -p /state/partition1/scratch
chmod 1777 /state/partition1/scratch
ln -s /state/partition1/scratch /scratch
</post>

</kickstart> 

